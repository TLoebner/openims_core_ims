#
# $id $date$ $author$ Ancuta Onofrei ancuta_onofrei@yahoo.com  $
#
# Location Routing Function (LRF) configuration script
#

# ----------- global configuration parameters ------------------------

debug=4
log_stderror=yes
memlog=5
sip_warning=yes

fork=yes
children=4

#to be able to send to the internet
listen=127.0.0.1
port=8060
alias=lrf.open-ims.test:8060

check_via=no		# (cmd. line: -v)
dns=no			# (cmd. line: -r)
rev_dns=no		# (cmd. line: -R)

# ------------------ module loading ----------------------------------

loadmodule "/opt/OpenIMSCore/ser_ims/modules/sl/sl.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/tm/tm.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/dialog/dialog.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/rr/rr.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/maxfwd/maxfwd.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/textops/textops.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/enum/enum.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/lrf/lrf.so"

modparam("lrf","name","sip:lrf.open-ims.test:8060")
modparam("lrf","using_lost_srv",1)
modparam("lrf","lost_server","http://lost.open-ims.test:8180/lost/LoSTServlet")
modparam("lrf","enable_locsip", 0)
modparam("lrf","locsip_srv_uri", "sip:locsip.open-ims.test:9180")



# add value to ;lr param to make some broken UAs happy
modparam("rr", "enable_full_lr", 1)



# -------------------------  request routing logic -------------------

# main routing logic

#define NO_LOC_FOUND		-3
#define ERR_PARSE_LOC		-4
#define	NO_SUPP_FMT_LOC		-5
#define OK_LOC			1


route{

	route(Sanity_Checks);
	if(LRF_trans_in_processing()){
		sl_send_reply("100", "Trying");
		break;
	}

	t_newtran();

	if (method=="OPTIONS"){
		log(1, ">> received OPTIONS\n");
		if(!LRF_alloc_user_data()){ #returns esqk
			sl_send_reply("500", "could not alloc ESQK");
			t_release();
			break;

		}
		
		if(!LRF_has_loc()){ 
			if(LRF_uses_LOCSIP()){
				#send a SUBSCRIBE to the GLE to ask for the location
				#TODO: if not anonymous
				if(LRF_subscribe_LOCSIP()){
					log(1, ">> sent the Subscribe for LocSIP\n");
					break;
				}
			}
		}else {
			LRF_parse_user_loc(); #parse and save the pointer
			if(($retcode == -3) || ($retcode==-5)){
				sl_send_reply("424", "no supported location format");
				LRF_del_user_data();
				t_release();
				break;
			}else if($retcode == -4){
				sl_send_reply("404", "bad location information");
				LRF_del_user_data();
				t_release();
				break;
			}
		}
		
		route(Retrieve_psap);
		
	}else if(method == "NOTIFY"){
	
		if(LRF_process_loc_notify()){
		
			LRF_sw2options();
			route(Retrieve_psap);
		}else{
			LRF_sw2options();
			LRF_options_empty_repl("400", "No available location");
			LRF_del_user_data();
			#t_release();
			break;
		}
	}
		
}


route[Retrieve_psap]
{
	log(1, ">> retrieve PSAP\n");
	if(!LRF_get_psap()){ #and set the psap in the user data
		LRF_options_empty_repl("404", "No PSAP found");
		LRF_del_user_data();
		#t_release();
		break;
	}

	if(!LRF_call_query_resp()){
		LRF_options_empty_repl("500", "Internal error");
		LRF_del_user_data();
		#t_release();
		break;
	}
#	if(uri=~".*anonymous.*")
	LRF_del_user_data();
	t_release();
	break;

}




