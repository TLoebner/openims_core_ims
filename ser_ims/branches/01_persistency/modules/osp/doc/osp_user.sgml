<!-- OSP Module User's Guide -->

<chapter>
  <chapterinfo>
    <revhistory>
      <revision>
        <revnumber>$Revision$</revnumber>
        <date>$Date$</date>
      </revision>
    </revhistory>
  </chapterinfo>
  <title>User's Guide</title>
  <section>
    <title>Overview</title>
    <para>The OSP module enables SER to support secure, multi-lateral peering using the OSP standard defined by ETSI (TS 101 321 V4.1.1). This module will enable your SER to:</para>
    <itemizedlist>
      <listitem>
        <para>Send a peering authorization request to a peering server.</para>
      </listitem>
      <listitem>
        <para>Validate a digitally signed peering authorization token received in a SIP INVITE message.</para>
      </listitem>
      <listitem>
        <para>Report usage information to a peering server.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Dependencies</title>
    <para>The OSP module depends on the following modules which must be loaded before the OSP module.</para>
    <itemizedlist>
      <listitem>
        <para><emphasis>textops</emphasis> -- text based operation</para>
      </listitem>
      <listitem>
        <para><emphasis>OSP Toolkit</emphasis> -- The OSP Toolkit, available from www.sipfoundry.org/OSP, must be built before building SER with the OSP Module. See the document "Multi-lateral Peering with SER", located at http://developer.berlios.de/docman/?group_id=3799 for build instructions.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Exported Parameters</title>
    <section>
      <title><varname>sp1_uri</varname>, <varname>sp2_uri</varname></title>
      <para>These string parameters define peering servers to be used for requesting peering authorization and routing information. sp1_uri must be configured. sp2_uri is required only if there are two peering servers. Each peering server address takes the form of a standard URL, and consists of up to four components:</para>
      <itemizedlist>
        <listitem>
          <para>An optional indication of the protocol to be used for communicating with the peering server. Both HTTP and HTTP secured with SSL/TLS are supported and are indicated by "http://" and "https://" respectively. If the protocol is not explicitly indicated, the SER defaults to HTTP secured with SSL.</para>
        </listitem>
        <listitem>
          <para>The Internet domain name for the peering server. An IP address may also be used, provided it is enclosed in square brackets such as [172.16.1.1].</para>
        </listitem>
        <listitem>
          <para>An optional TCP port number for communicating with the peering server. If the port number is omitted, the SER defaults to port 1080 (for HTTP) or port 1443 (for HTTP secured with SSL).</para>
          <para>The uniform resource identifier for requests to the peering server. This component is not optional and must be included.</para>
        </listitem>
      </itemizedlist>
      <example>
        <title>Setting the OSP servers</title>
        <programlisting format="linespecific">
modparam ("osp", "sp1_uri", "http://osptestserver.transnexus.com:1080/osp")
modparam ("osp", "sp2_uri", "https://[1.2.3.4]:1443/osp")
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>device_ip</varname></title>
      <para>device_ip (string) is a recommended parameter that explicitly defines the IP address of SER in an peering request message (as SourceAlternate type=transport).  The IP address must be in brackets as shown in the example below.</para>
      <example>
        <title>Setting the device IP address</title>
        <programlisting format="linespecific">
modparam ("osp", "device_ip", "[1.1.1.1]")
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>token_format</varname></title>
      <para>When SER receives a SIP INVITE with a peering token, the OSP Module will validate the token to determine whether or not the call has been authorized by a peering server. Peering tokens may, or may not, be digitally signed. The token format (integer) parameter defines if SER will validate signed or unsigned tokens or both. The values for token format are defined below. The default value is 2.</para>
      <para>0 - Validate only signed tokens. Calls with valid signed tokens are allowed.</para>
      <para>1 - Validate only unsigned tokens. Calls with valid unsigned tokens are allowed.</para>
      <para>2 - Validate both signed and unsigned tokens are allowed. Calls with valid tokens are allowed.</para>
      <example>
        <title>Setting the token format</title>
        <programlisting format="linespecific">
modparam ("osp", "token_format", 2)
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>private_key</varname>, <varname>local_certificate</varname>, <varname>ca_certificates</varname></title>
      <para>These parameters identify files are used for validating peering authorization tokens and establishing a secure channel between SER and a peering server using SSL.  The files are generated using the 'Enroll' utility from the OSP Toolkit. By default, the proxy will look for pkey.pem, localcert.pem, and cacart_0.pem in the default configuration directory. The default config directory is set at compile time using CFG_DIR and defaults to /usr/local/etc/ser/. The files may be copied to the expected file location or the parameters below may be changed.</para>
      <example>
        <title>Set authorization files</title>
        <para>If the default CFG_DIR value was used at compile time, the files will be loaded from:</para>
        <programlisting format="linespecific">
modparam ("osp", "private_key", "/usr/local/etc/ser/pkey.pem")
modparam ("osp", "local_certificate", "/usr/local/etc/ser/localcert.pem")
modparam ("osp", "ca_certificates", "/usr/local/etc/ser/cacert.pem")
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>sp1_weight</varname>, <varname>sp2_weight</varname></title>
      <para>These sp_weight (integer) parameters are used for load balancing peering requests to peering servers. These parameters are most effective when configured as factors of 1000. For example, if sp1_uri should manage twice the traffic load of sp2_uri, then set sp1_weight to 2000 and sp2_weight to 1000. Shared load balancing between peering servers is recommended. However, peering servers can be configured as primary and backup by assigning a sp_weight of 0 to the primary server and a non-zero sp_weight to the back-up server. The default values for sp1_weight and sp2_weight are 1000.</para>
      <example>
        <title>Setting the OSP server weights</title>
        <programlisting format="linespecific">
modparam ("osp", "sp1_weight", 1000)
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>device_port</varname></title>
      <para>The device_port (string) parameter is an optional field which includes the SIP port being used by SER in the peering request (as SourceAlternate type=network) to the peering server. If is not configured, this information is not included in the peering request. This field is useful if multiple SERs are running on the same Linux computer since it enables the peering server to administer different peering policies based on different SIP proxies.</para>
      <example>
        <title>Setting the device port</title>
        <programlisting format="linespecific">
modparam ("osp", "device_port", "5060")
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>enable_crypto_hardware_support</varname></title>
      <para>The enable_crypto_hardware_support (integer) parameter is used to set the cryptographic hardware acceleration engine in the openssl library. The default value is 0 (no crypto hardware is present). If crypto hardware is used, the value should be set to 1.</para>
      <example>
        <title>Setting the hardware support</title>
        <programlisting format="linespecific">
modparam ("osp", "enable_crypto_hardware_support", 0)
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>ssl_lifetime</varname></title>
      <para>The ssl_lifetime (integer) parameter defines the lifetime, in seconds, of a single SSL session key. Once this time limit is exceeded, the OSP Module will negotiate a new session key. Communication exchanges in progress will not be interrupted when this time limit expires. This is an optional field with default value is 200 seconds.</para>
      <example>
        <title>Setting the ssl lifetime</title>
        <programlisting format="linespecific">
modparam ("osp", "ssl_lifetime", 200)
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>persistence</varname></title>
      <para>The persistence (integer) parameter defines the time, in seconds, that an HTTP connection should be maintained after the completion of a communication exchange. The OSP Module will maintain the connection for this time period in anticipation of future communication exchanges to the same peering server.</para>
      <example>
        <title>Setting the persistence</title>
        <programlisting format="linespecific">
modparam ("osp", "persistence", 1000)
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>retry_delay</varname></title>
      <para>The retry_delay (integer) parameter defines the time, in seconds, between retrying connection attempts to an OSP peering server. After exhausting all peering servers the OSP Module will delay for this amount of time before resuming connection attempts. This is an optional field with default value is 1 second.</para> 
      <example>
        <title>Setting the retry delay</title>
        <programlisting format="linespecific">
modparam ("osp", "retry_delay", 1)
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>retry_limit</varname></title>
      <para>The retry_limit (integer) parameter defines the maximum number of retries for connection attempts to an peering server. If no connection is established after this many retry attempts to all peering servers, the OSP Module will cease connection attempts and return appropriate error codes. This number does not count the initial connection attempt, so that a retry_limit of 1 will result in a total of two connection attempts to every peering server. The default value is 2.</para> 
      <example>
        <title>Setting the retry limit</title>
        <programlisting format="linespecific">
modparam ("osp", "retry_limit", 2)
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>timeout</varname></title>
      <para>The timeout (integer) parameter defines the maximum time in milliseconds, to wait for a response from an peering server. If no response is received within this time, the current connection is aborted and the OSP Module attempts to contact the next peering server. The default value is 10 seconds.</para> 
      <example>
        <title>Setting the timeout</title>
        <programlisting format="linespecific">
modparam ("osp", "timeout", 10)
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>max_destinations</varname></title>
      <para>The max_destinations (integer) parameter defines the maximum number of destinations that SER requests the peering server to return in a peering response. The default value is 5.</para>
      <example>
        <title>Setting the number of destination</title>
        <programlisting format="linespecific">
modparam ("osp", "max_destinations", 5)
        </programlisting>
      </example>
    </section>
    <section>
      <title><varname>validate_call_id</varname></title>
      <para>The validate_call_id (integer) parameter instructs the OSP module to validate call id in the peering token. If this value is set to 1, the OSP Module validates that the call id in the SIP INVITE message matches the call id in the peering token. If they do not match the INVITE is rejected. If this value is set to 0, the OSP Module will not validate the call id in the peering token. The default value is 1</para>
      <example>
        <title>Instructing the module to validate call id</title>
        <programlisting format="linespecific">
modparam ("osp", "validate_call_id", 1)
        </programlisting>
      </example>
    </section>
  </section>
  <section>
    <title>Exported Functions</title>
    <section>
      <title><function moreinfo="none">checkospheader()</function></title>
      <para>This function checks for the existence of the OSP-Auth-Token header field.</para>
      <example>
        <title>checkospheader usage</title>
        <programlisting format="linespecific">
...
if (checkospheader()) {
  log("OSP header field found.\n");
} else {
  log("no OSP header field present\n");
};
...
        </programlisting>
      </example>
    </section>
    <section>
      <title><function moreinfo="none">validateospheader()</function></title>
      <para>This function validates an OSP-Token specified in the OSP-Auth-Tokenheader field of the SIP message. If a peering token is present, it will be validated locally. If no OSP header is found or the header token is invalid or expired, -1 is returned; on successful validation 1 is returned.</para>
      <example>
        <title>validateospheader usage</title>
        <programlisting format="linespecific">
...
if (validateospheader()) {
  log("valid OSP header found\n");
} else {
  log("OSP header not found, invalid or expired\n");
};
...
        </programlisting>
      </example>
    </section>
    <section>
      <title><function moreinfo="none">requestosprouting()</function></title>
      <para>This function launches a query to the peering server requesting the IP address of one or more destination peers serving the called party. If destination peers are available, the peering server will return the IP address and a peering authorization token for each destination peer. The OSP-Auth-Token Header field is inserted into the SIP message and the SIP uri is rewritten to the IP address of destination peer provided by the peering server.</para>
      <para>The address of the called party must be a valid E164 number, otherwise this function returns -1. If the transaction was accepted by the peering server, the uri is being rewritten and 1 returned, on errors (peering servers are not available, authentication failed or there is no route to destination or the route is blocked) -1 is returned.</para>
      <example>
        <title>requestosprouting usage</title>
        <programlisting format="linespecific">
...
if (requestosprouting()) {
  log("successfully queried OSP server, now relaying call\n");
} else {
  log("Authorization request was rejected from OSP server\n");
};
...
        </programlisting>
      </example>
    </section>
    <section>
      <title><function moreinfo="none">preparefirstosproute()</function></title>
      <para>This function tries to prepare the INVITE to be forwarded or redirected using the first destination in the list returned by the peering server. If the route could not be prepared, the function returns 'FALSE' back to the script, which can then decide how to handle the failure.</para>
      <example>
        <title>preparefirstosproute usage</title>
        <programlisting format="linespecific">
...
if (preparefirstosproute ()) {
  log("successfully prepared the first route, now relaying call\n");
} else {
  log("could not prepare the route. The first destination was blocked\n");
};
...
        </programlisting>
      </example>
    </section>
    <section>
      <title><function moreinfo="none">preparenextosproute()</function></title>
      <para>Once the call could not be completed through the first destination, this function tries to prepare the INVITE message using the next destination in the list returned by the peering Server. If it succeeds in preparing the route, the message is either redirected or relayed on (using the t_relay call), or else the function returns 'FALSE' back to the script, which can then decide how to handle the failure.</para>
      <example>
        <title>preparenextosproute usage</title>
        <programlisting format="linespecific">
...
if (preparenextosproute ()) {
  log("successfully prepared the next route, now relaying call\n");
} else {
  log("could not prepare the route. No next destination available\n");
};
...
        </programlisting>
      </example>
    </section>
    <section>
      <title><function moreinfo="none">prepareallosproute()</function></title>
      <para>This function tries to prepare all the routes in the list returned by the peering server. The message is then either forked off or redirected to the destination. If unsuccessful in preparing the routes a SIP 500 is sent back and a trace message is logged.</para>
      <example>
        <title>prepareallosproute usage</title>
        <programlisting format="linespecific">
...
if (prepareallosproute ()) {
  log("successfully prepared the routes, now either forking or redirecting the call\n");
} else {
  log("could not prepare the route. No destination available\n");
};
...
        </programlisting>
      </example>
    </section>
    <section>
      <title><function moreinfo="none">reportospusage()</function></title>
      <para>This function should be called after receiving a BYE message. If the message contains an OSP cookie, the function will forward originating and/or terminating duration usage information to a peering server. The function returns TRUE if the BYE includes an OSP cookie. The actual usage message will be send on a different thread and will not delay BYE processing. The function should be called before relaying the message.</para>
      <example>
        <title>reportospusage usage</title>
        <programlisting format="linespecific">
...
if (reportospusage ()) {
  log("OSP call duration usage will be reported\n");
} else {
  log("The BYE message does not include OSP information, it was not authorized by an OSP server\n");
};
...
        </programlisting>
      </example>
    </section>
  </section>
</chapter>

<!-- Keep this element at the end of the file
Local Variables:
sgml-parent-document: ("osp.sgml" "Book" "chapter")
End:
-->
