/*
 * $Id$
 * 
 * Copyright (C) 2009 FhG Fokus
 * 
 * This file is part of the Wharf project.
 * 
 */

/**
 * \file
 * 
 * Wharf CDiameter AVP Operations modules - Base RFC3588 AVPs
 * 
 * 
 *  \author Dragos Vingarzan dragos dot vingarzan -at- fokus dot fraunhofer dot de
 * 
 */ 

/* 
 * RFC 3588 Base AVPs
 * 
 * http://tools.ietf.org/html/rfc3588
 * 
 */

#include "macros.h"

#undef CDP_AVP_MODULE
#define CDP_AVP_MODULE base

#if !defined(CDP_AVP_DECLARATION) && !defined(CDP_AVP_EXPORT) && !defined(CDP_AVP_INIT) && !defined(CDP_AVP_REFERENCE)
	#ifndef _CDP_AVP_GET_BASE_H_1
	#define _CDP_AVP_GET_BASE_H_1

		#include "../cdp/cdp_load.h"

	#else

		/* undo the macros definition if this was re-included */
		#define CDP_AVP_EMPTY_MACROS
			#include "macros.h"
		#undef CDP_AVP_EMPTY_MACROS

	#endif
#endif //_CDP_AVP_GET_BASE_H_1	

/*
 * The list of AVPs must be declared in the following format:
 * 
 * 
 * 		cdp_avp_get(<avp_name>.<vendor_id>,<avp_type>,<data_type>)
 * 
 * 
 * avp_name - a value of AVP_<avp_name> must resolve to the AVP code
 * 
 * vendor_id - an int value
 * avp_type - an avp type for which a function was defined a
 * 				int cdp_avp_get_<avp_type>(AAA_AVP *avp,<data_type> *data)
 * 		Some valid suggestions (and the data_type):		
 *  
 *  			OctetString 	- str
 *  			Integer32		- int32_t
 *  			Integer64 		- int64_t
 *  			Unsigned32 		- uint32_t
 *  			Unsigned64 		- uint64_t
 *  			Float32 		- float
 *  			Float64 		- double
 *  			Grouped 		- AAA_AVP_LIST
 *  
 *  			Address 		- ip_address
 *  			Time 			- time_t
 *  			UTF8String 		- str
 *  			DiameterIdentity- str
 *  			DiameterURI		- str
 *  			Enumerated		- int32_t
 *  			IPFilterRule	- str
 *  			QoSFilterRule	- str
 *  data_type - the respective data type for the avp_type defined above
 *  
 *  The functions generated will return 1 on success or 0 on error or not found
 *  The prototype of the function will be:
 *  
 *  	int cdp_avp_get_<avp_name_group>(AAA_AVP_LIST list,<data_type> *data,AAA_AVP **avp_ptr)
 * 
 * 
 *  
 *  For Grouped AVPs with 2 or 3 known inside AVPs, you can define a shortcut function which will find the group and
 *  also extract the 2 or 3 AVPs. 
 *  Do not define both 2 and 3 for the same type!
 * 
 * 
 *  
 * 		cdp_avp_get2(<avp_name_group>.<vendor_id_group>,<avp_name_1>,<data_type_1>,<avp_name_2>,<data_type_2>)
 *  	
 *  	cdp_avp_get3(<avp_name_group>.<vendor_id_group>,<avp_name_1>,<data_type_1>,<avp_name_2>,<data_type_2>,<avp_name_3>,<data_type_3>)
 * 
 * 
 *  
 *  avp_name_group - a value of AVP_<avp_name_group> must resolve to the AVP code of the group
 *  
 *  vendor_id_group - an int value
 *  
 *  avp_name_N	- the name of the Nth parameter. 
 *  	Previously, a cdp_avp_get(<avp_name_N>,<vendor_id_N>,<avp_type_N>,<data_type_N>) must be defined!
 *  
 *  data_type_N	- the respective data type for avp_type_N (same as <data_type_N) 
 *  
 *  The functions generated will return the number of found AVPs inside on success or 0 on error or not found
 *  The prototype of the function will be:
 *  
 *  	int cdp_avp_get_<avp_name_group>_Group(AAA_AVP_LIST list,<data_type_1> *avp_name_1,<data_type_2> *avp_name_2[,<data_type_3> *avp_name_3],AAA_AVP **avp_ptr)
 *  
 *  
 */

cdp_avp_get(Vendor_Id,						0,	Unsigned32,			uint32_t)
cdp_avp_get(Firmware_Revision,				0,	Unsigned32,			uint32_t)
cdp_avp_get(Host_IP_Address,				0,	Address,			ip_address)
cdp_avp_get(Supported_Vendor_Id,			0,	Unsigned32,			uint32_t)
cdp_avp_get(Product_Name,					0,	UTF8String,			str)
cdp_avp_get(Disconnect_Cause,				0,	Enumerated,			int32_t)
cdp_avp_get(Origin_Host,					0,	DiameterIdentity,	str)
cdp_avp_get(Origin_Realm,					0,	DiameterIdentity,	str)
cdp_avp_get(Destination_Host,				0,	DiameterIdentity,	str)
cdp_avp_get(Destination_Realm,				0,	DiameterIdentity,	str)
cdp_avp_get(User_Name,						0,	UTF8String,			str)
cdp_avp_get(Result_Code,					0,	Unsigned32,			uint32_t)
cdp_avp_get(Experimental_Result_Code,		0,	Unsigned32,			uint32_t)
cdp_avp_get(Experimental_Result,			0,	Grouped,			AAA_AVP_LIST)
cdp_avp_get(Auth_Application_Id,			0,	Unsigned32,			uint32_t)
cdp_avp_get(Acct_Application_Id,			0,	Unsigned32,			uint32_t)
cdp_avp_get(Vendor_Specific_Application_Id,	0,	Grouped,			AAA_AVP_LIST)
cdp_avp_get(Session_Id,						0,	UTF8String,			str)
cdp_avp_get(Error_Message,					0,	UTF8String,			str)
cdp_avp_get(Re_Auth_Request_Type,			0,	Enumerated,			int32_t)
cdp_avp_get2(Experimental_Result,			0,	Vendor_Id, uint32_t, Experimental_Result_Code,	uint32_t)
cdp_avp_get3(Vendor_Specific_Application_Id,0,	Vendor_Id, uint32_t, Auth_Application_Id,	 	uint32_t, Acct_Application_Id,	uint32_t)





/*
 * From here-on you can define/export/init/declare functions which can not be generate with the macros
 */

#if defined(CDP_AVP_DEFINITION)

	/*
	 * Put here your supplimentary definitions. Typically:
	 * 
	 * int <function1>(param1)
	 * {
	 *   code1
	 * }
	 * 
	 * 
	 */
	
	/**
	 * http://tools.ietf.org/html/rfc3588#section-6.11
	 * @param list
	 * @param data
	 * @return
	 */
	int cdp_avp_get_Vendor_Specific_Application_Id_example(AAA_AVP_LIST list,uint32_t *vendor_id,uint32_t *auth_app_id,uint32_t *acct_app_id)
	{
		AAA_AVP_LIST list_grp={0,0};
		AAA_AVP *avp = cdp_avp_get_from_list(list,
				AVP_Vendor_Specific_Application_Id,
				0);
		if (!avp) goto error;
		cdp_avp_get_Grouped(avp,&list_grp);
		if (!cdp_avp_get_Vendor_Id(list_grp,vendor_id,0)) goto error;
		cdp_avp_get_Auth_Application_Id(list_grp,auth_app_id,0);	
		cdp_avp_get_Acct_Application_Id(list_grp,acct_app_id,0);	
		cdp->AAAFreeAVPList(&list_grp);
		return 1;
	error:
		if (vendor_id) *vendor_id = 0;
		if (auth_app_id) *auth_app_id = 0;
		if (acct_app_id) *acct_app_id = 0;
		cdp->AAAFreeAVPList(&list_grp);
		return 0;
	}
	


#elif defined(CDP_AVP_EXPORT)

	/*
	 * Put here your supplimentary exports in the format: 
	 * 	<function_type1> <nice_function_name1>; 
	 *  <function_type2> <nice_function_name1>;
	 *  ...
	 *  
	 */

	cdp_avp_get_Vendor_Specific_Application_Id_example_f	cdp_avp_get_Vendor_Specific_Application_Id_example;
	

#elif defined(CDP_AVP_INIT)

	/*
	 * Put here your supplimentary inits in the format: 
	 * 	<function1>,
	 *  <function2>,
	 *  ...
	 * 
	 * Make sure you keep the same order as in export!
	 * 
	 */

	cdp_avp_get_Vendor_Specific_Application_Id_example,

#elif defined(CDP_AVP_REFERENCE)
	/*
	 * Put here what you want to get in the reference. Typically:
	 * <function1>
	 * <function2>
	 * ... 
	 * 
	 */

int CDP_AVP_MODULE get_Vendor_Specific_Application_Id_example(AAA_AVP_LIST list,uint32_t *vendor_id,uint32_t *auth_app_id,uint32_t *acct_app_id);
	
#elif defined(CDP_AVP_EMPTY_MACROS)
	
	/* this should be left blank */
	
#else

	/*
	 * Put here your definitions according to the declarations, exports, init, etc above. Typically:
	 * 
	 * int <function1(params1);>
	 * typedef int <*function_type1>(params1);
	 * 
	 * int <function2(param2);>
	 * typedef int <*function_type2>(params2);
	 * 
	 * ...
	 *  
	 */
	
	#ifndef _CDP_AVP_GET_BASE_H_2
	#define _CDP_AVP_GET_BASE_H_2

	
	
	int cdp_avp_get_Vendor_Specific_Application_Id_example(AAA_AVP_LIST list,uint32_t *vendor_id,uint32_t *auth_app_id,uint32_t *acct_app_id);
	typedef int (*cdp_avp_get_Vendor_Specific_Application_Id_example_f)(AAA_AVP_LIST list,uint32_t *vendor_id,uint32_t *auth_app_id,uint32_t *acct_app_id);
	

	#endif //_CDP_AVP_GET_BASE_H_2
	
#endif



#define CDP_AVP_UNDEF_MACROS
	#include "macros.h"
#undef CDP_AVP_UNDEF_MACROS
	



