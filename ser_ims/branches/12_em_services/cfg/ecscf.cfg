#
# $id$ $date$ $author$ Ancuta Onofrei ancuta_onofrei@yahoo.com
#
# Emergency - CSCF configuration script
#

# ----------- global configuration parameters ------------------------

debug=4
log_stderror=yes
memlog=5
sip_warning=yes

fork=yes
children=4

#to be able to send to the internet
listen=0.0.0.0
port=7060
alias=ecscf.open-ims.test:7060

check_via=no		# (cmd. line: -v)
dns=no			# (cmd. line: -r)
rev_dns=no		# (cmd. line: -R)

# ------------------ module loading ----------------------------------

loadmodule "/opt/OpenIMSCore/ser_ims/modules/sl/sl.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/tm/tm.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/dialog/dialog.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/rr/rr.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/maxfwd/maxfwd.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/textops/textops.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/enum/enum.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/ecscf/ecscf.so"

modparam("ecscf","name","sip:ecscf.open-ims.test:7060")
modparam("ecscf","lrf_sip_uri","sip:lrf.open-ims.test:8060")


# add value to ;lr param to make some broken UAs happy
modparam("rr", "enable_full_lr", 1)



# -------------------------  request routing logic -------------------

# main routing logic

#onreply_route{
	
#	log(1,">>       reply\n");
#	break;
#}

route{

	route(Sanity_Checks);
	if (method!="INVITE" && method!="ACK" && method!="CANCEL" && method!="BYE" && method!="PRACK"){
		log(1, "invalid request\n");
		sl_send_reply("403","Forbidden - Only INVITE and ACK supported");
		break;
	}

	if(method!=ACK && E_trans_in_processing()){
		log(1, ">> retransmission\n");
		break;
	}	

	if (E_is_in_dialog("orig")){
		log(1,">>     in  Orig dialog\n");
		if (method!="CANCEL") route(Orig_Subsequent);
		else route(Orig_Standalone);
		break;
	}
		
#	if (E_is_in_dialog("term")){
#		log(1,">>     in  Orig dialog\n");
#		t_newtran();
#		if (method!="CANCEL") route(Term_Subsequent);
#		else route(Orig_Standalone);
#		break;
#	}
	# No dialog yet - ACK not relayed as hop-to-hop
	if (method=="ACK"){
		t_release();
		break;
	}else if (method=="INVITE"){
		t_newtran();
		route(Orig_Initial);
		break;
	}
}

route[Sanity_Checks]
{
	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	};
	
	if (msg:len >=  max_len ) {
		sl_send_reply("513", "Message too big");
		exit;
	};

	if(@hf_value.max_forwards=="0"){
		
		exit;
	}
}

route[Orig_Initial]
{
	t_newtran();
	log(1,">>       Orig_Initial\n");
	E_save_dialog("orig");
	if($retcode == 0 || $retcode == -1 || $retcode == -2){
		sl_send_reply("514","Originating dialog save failure - E-CSCF maximum dialog count reached!");
		break;
	}
	
	E_get_location("orig");
	if($retcode ==0 || $retcode == -2){
		sl_send_reply("400","Bad request");
		E_drop_dialog("orig");
		break;
	}else if($retcode == -1){
		log(1, ">>  no location, in the future a default psap will be used\n");
		sl_send_reply("400","No supported location information");
		E_drop_dialog("orig");
		break;
	}

	E_query_LRF("orig");
	if($retcode == 0 || $retcode == -1 || $retcode == -2){
		sl_send_reply("514","Could not query the LRF!");
		E_drop_dialog("orig");
		break;
	}
	t_on_reply("Orig_Initial_reply");
	#t_on_failure("Orig_Initial_failure");

	
#	E_add_rr();

#	if(!E_fwd_to_psap("orig")){
#		sl_send_reply("500", "Could not add the fwd fields");
#		E_drop_dialog("orig");
#		break;
#	}


#	if(!t_relay()){
#		sl_send_reply("418", "Could not forward the E-call to the PSAP");
#		E_drop_dialog("orig");
#		t_release();
#	}
	break;
}

onreply_route[Orig_Initial_reply]
{
	log(1,">>       Orig_Initial_reply\n");
	
	if (!t_check_status("(408)|(480)")){
		E_update_dialog("orig");
	}else{
		E_drop_dialog("orig");
	}	

	break;
}

failure_route[Orig_Initial_failure]
{
	log(1,">>       Orig_Initial_failure\n");
	if (t_check_status("(408)|(480)")){
		E_drop_dialog("orig");
		break;
	}
	#if (method=="INVITE")
	#	P_drop_session();
	#P_drop_dialog();
	break;
}


route[Orig_Subsequent]
{
	#t_newtran();
	log(1,">>       Orig_Subsequent\n");

	E_update_dialog("orig");

#	if(method == "ACK" || method == "PRACK" ||method!="CANCEL" && method!="BYE" ){
	if(method == "INVITE"){
		break;
	}

	if (method!="ACK"){
		t_on_reply("Orig_Subsequent_reply");
		#t_on_failure("Orig_Subsequent_failure");
	}
	loose_route();
	if (!t_relay()) {
		sl_send_reply("500","Error forwarding subsequent request towards terminating leg");
		exit;
	};
	
}

route[Orig_Standalone]
{
	log(1,">>       Orig_Subsequent\n");

	E_update_dialog("orig");

	t_on_reply("Orig_Standalone_reply");
	
	if (!t_relay()) {
		sl_send_reply("500","Error forwarding subsequent request towards terminating leg");
		exit;
	};
	
}

onreply_route[Orig_Subsequent_reply]
{
	log(1,">>       Orig_Subsequent_reply\n");
	if (t_check_status("1..")||t_check_status("2..")){
		E_update_dialog("orig");		
	}
	
	break;
}

onreply_route[Orig_Standalone_reply]
{
	log(1,">>       Orig_Standalone_reply\n");
	break;
}



route[Term_Subsequent]
{
	#t_newtran();
	log(1,">>       Term_Subsequent\n");

	E_update_dialog("term");
	if (method!="ACK") {
		t_on_reply("Term_Subsequent_reply");
		#t_on_failure("Term_Subsequent_failure");
	}	
	loose_route();
	if (!t_relay()) {
		sl_send_reply("500","Error forwarding originating subsequent request");
		break;
	};
	
}

onreply_route[Term_Subsequent_reply]
{
	log(1,">>       Term_Subsequent_reply\n");
#	if (t_check_status("305")){
#		S_proxy_request();
#		break;
#	}
	E_update_dialog("term");
	break;		
}

failure_route[Term_Subsequent_failure]
{
	log(1,">>       Term_Subsequent_failure\n");
}

