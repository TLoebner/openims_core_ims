#
# $Id$
#
# TRansit Control Function configuration script
#

# ----------- global configuration parameters ------------------------

debug=3
log_stderror=yes
memlog=5
sip_warning=yes

fork=yes
children=4


listen=127.0.0.1
port=3060
alias="trcf.open-ims.test"
advertised_address="trcf.open-ims.test"
advertised_port=3060

check_via=no	# (cmd. line: -v)
dns=no			# (cmd. line: -r)
rev_dns=no		# (cmd. line: -R)

# ------------------ module loading ----------------------------------

# Uncomment this if you want to use SQL database
loadmodule "/opt/OpenIMSCore/ser_ims/modules/sl/sl.so"

loadmodule "/opt/OpenIMSCore/ser_ims/modules/tm/tm.so"
modparam("tm", "fr_timer", 10000)

loadmodule "/opt/OpenIMSCore/ser_ims/modules/rr/rr.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/maxfwd/maxfwd.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/textops/textops.so"


loadmodule "/opt/OpenIMSCore/ser_ims/modules/enum/enum.so"


# -- rr params --
# add value to ;lr param to make some broken UAs happy
modparam("rr", "enable_full_lr", 1)

# -------------------------  request routing logic -------------------
# main routing logic

route{
        log(1,">>	Starting TRCF processing\n");
	
	route(Sanity_Checks);
	
	#If there is a Route header we try to do loose route	
	if (search("^Route:")){
		# subsequent messages withing a dialog should take the
		# path determined by record-routing
		if (loose_route()) {
			# mark routing logic in request
			append_hf("P-hint: TRCF rr-enforced\r\n");
		    log(1,">>	Routing through Route header\n");
			if (!t_relay()){
				sl_reply_error();
				break;
			}
			break;	
 		}
	}	
	
	if (method=="INVITE" || method=="CANCEL"){
		route(Initial_Request);
		break;
	}else{
	    log(1,">>	Method not allowed at the TRCF (or missing Route header?)\n");
		# Shouldn't get here unless miss-configured (add more methods as initial) or
		# somebody is routing here unknown messages
		if (method=="ACK"){
			log(1,">>    ACK discarded silently - not acceptable here\n");
			break;
		}
		if ( !t_newtran()) {
			sl_reply_error();
			break;
		};
		append_to_reply("Allow: INVITE,CANCEL\r\n");
		t_reply("406","Initial Request Method not allowed at the TRCF");
		break;
	}
}


route[Sanity_Checks]
{
	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	};
	
	if (msg:len >=  max_len ) {
		sl_send_reply("513", "Message too big");
		exit;
	};

	if(@hf_value.max_forwards=="0"){
		
		exit;
	}
}


route[Initial_Request]
{
    log(1,">>	Routing Initial Request - Originating side\n");
    
        if(enum_query_orig()){
            log(1,">>		- ENUM query for originating user successful routing to I-CSCF\n");
            if (!t_relay()) {
	        	t_reply("500","Error forwarding to external IMS or SIP domain (orig)");
				exit;
    	    };
	    exit;
	}
        

    log(1,">>	Routing Initial Request - Terminating side\n");

    if (uri=~"tel:.*") {
        log(1,">>		- we have a tel uri\n");
        if(!enum_query()){
            log(1,">>		- ENUM query failed - routing to BGCF/MGCF\n");
            route(BGCF);
            exit;
		}
        log(1,">>		- ENUM query success\n");
    } else {
        log(1,">>		- we have a SIP uri\n");
    }
    
    if ( ! uri=~".*@open-ims\.test.*") { # ENUM resolved to another domain
        log(1,">>		- message for external domain - routing to I-CSCF/IBCF\n");
        t_on_reply("Initial_Request_reply");
        t_on_failure("Initial_Request_failure");
		if (!t_relay()) {
			t_reply("500","Error forwarding to external IMS or SIP domain");
			exit;
		};
		exit;
	} else {
		log(1,">>		- message for internal IMS domain - routing to I-CSCF\n");
		t_on_reply("Initial_Request_reply");
		t_on_failure("Initial_Request_failure");
		if (!t_relay()) {
			t_reply("500","Error forwarding to internal IMS domain");
			exit;
		};
		exit;
	}
}

onreply_route[Initial_Request_reply]
{
	log(1,">>	Received initial request reply\n");
}

failure_route[Initial_Request_failure]
{
	log(1,">>	Received initial request failure\n");
}

route[BGCF]
{
	# Forward to a BGCF/MGCF - PSTN termination
	
	insert_hf_value("Route","<sip:term@mgcf.open-ims.test;lr>");
	#insert_hf_value("Route","<sip:term@bgcf.open-ims.test;lr>");
	
	t_relay_to_udp("127.0.0.1", "7060");	
	exit;
}
