#
# $Id$
#
# SIP2IMS Gateway configuration script
#

# ----------- global configuration parameters ------------------------

debug=3
log_stderror=yes
memlog=4
sip_warning=yes

fork=yes
children=4


listen=127.0.0.1
port=3060
alias=sip2ims.open-ims.test

check_via=no	# (cmd. line: -v)
dns=no			# (cmd. line: -r)
rev_dns=no		# (cmd. line: -R)

# ------------------ module loading ----------------------------------

# Uncomment this if you want to use SQL database
loadmodule "/opt/OpenIMSCore/ser_ims/modules/mysql/mysql.so"

loadmodule "/opt/OpenIMSCore/ser_ims/modules/sl/sl.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/tm/tm.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/maxfwd/maxfwd.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/textops/textops.so"
loadmodule "/opt/OpenIMSCore/ser_ims/modules/auth/auth.so"

loadmodule "/opt/OpenIMSCore/ser_ims/modules/auth_db/auth_db.so"
modparam("auth_db","db_url","mysql://sip2ims:heslo@localhost/sip2ims")
modparam("auth_db","use_did",0)

loadmodule "/opt/OpenIMSCore/ser_ims/modules/rr/rr.so"
modparam("rr", "enable_full_lr", 1)

loadmodule "/opt/OpenIMSCore/ser_ims/modules/sip2ims/sip2ims.so"

modparam("sip2ims","db_url","mysql://sip2ims:heslo@localhost/sip2ims")
modparam("sip2ims","db_table","credentials")
#modparam("sip2ims","secret","alabala")
modparam("sip2ims","nonce_expire",300)


# -------------------------  request routing logic -------------------

# main routing logic

route{
	
	route(Sanity_Checks);
	
#	if (uri==myself){
#		sl_send_reply("400","The SIP-to-IMS Gateway only works in proxy mode (no UAC/S)");
#		break;
#	}

	if (method==REGISTER){
		route(REGISTER);
	}
	route(PCSCF);	
}


route[Sanity_Checks]
{
	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests
	if (!mf_process_maxfwd_header("11")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	};
	if (msg:len >=  max_len ) {
		sl_send_reply("513", "Message too big");
		exit;
	};
}


route[REGISTER]
{
	if (www_authorize("open-ims.test","credentials")) {
		if (!Gw_MD5_to_AKA("1")){
			sl_send_reply("500","Error translating MD5->AKA authorized REGISTER");
			exit;
		}
	}else{ 
		if (!Gw_MD5_to_AKA("0")){
			sl_send_reply("500","Error translating MD5->AKA unauthorized REGISTER");
			exit;
		}				
	}
	
	t_on_reply("REGISTER_reply");
	#t_on_failure("REGISTER_failure");
	route(PCSCF);		
	exit;
}

onreply_route[REGISTER_reply]
{
	if (t_check_status("401")){
		if (!Gw_AKA_to_MD5()){
			log(1,"Error translating from AKA to MD5");
			#sl_send_reply("500","Error translating AKA->MD5 challenge");
			break;
		}	
	}	
}

route[PCSCF]
{
    if (method=="INVITE" ||method=="SUBCRIBE"){
		record_route();
	}
	if (method=="ACK"||method=="BYE"||method=="NOTIFY"){
		loose_route();
		t_relay();
		exit;
	}
	loose_route();
	if (!search(".*sip:127.0.0.1:3060.*")||method=="REGISTER") {
		if (!t_relay_to_udp("127.0.0.1","4060")) {
		    sl_send_reply("500","Error forwarding to P-CSCF");
		}
	} else {
	    if (!t_relay()) {
    	     sl_reply_error();
    	}
    }
    exit;
}
